name: Production
'on':
  push:
    branches:
      - main
jobs:
  production:
    runs-on: ubuntu-latest
    env:
      PAT: '${{ secrets.PAT }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Git
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Use Node.js version specified in .nvmrc
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          nvm install && nvm use

      - name: Install dependencies
        run: npm ci

      - name: Link project
        run: npm link

      - name: Link project by name
        run: npm link ecc

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: '${{ secrets.PAT }}'
          publish_dir: ./dist


      - name: Get version
        id: package
        run: >
          echo "::set-output name=version::$(node -p
          "require('./package.json').version")"
        shell: bash

      - name: Check if release already exists
        id: check_release
        run: |
          RESPONSE=$(curl \
            --http1.1 \
            --silent \
            --show-error \
            --header "Authorization: Bearer ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.package.outputs.version }}")
          echo "::set-output name=exists::$( echo "$RESPONSE" | jq -r '.message != "Not Found"' )"

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.package.outputs.version }}'
          release_name: 'Release ${{ steps.package.outputs.version }}'
          draft: false
          prerelease: false

      - name: Publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > .npmrc
          npm publish
          rm .npmrc